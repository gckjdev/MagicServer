package com.orange.game.model.manager;import com.mongodb.DBCursor;import com.mongodb.DBObject;import com.orange.common.mongodb.MongoDBClient;import com.orange.game.model.dao.CommonData;import com.orange.game.model.service.DBService;import org.apache.log4j.Logger;import java.util.*;/** * The Class CommonManager. */public class CommonManager {    /**     * The Constant log.     */    public static final Logger log = Logger.getLogger(CommonManager.class            .getName());    /**     * The Constant DEFAULT_OFFSET.     */    private static final int DEFAULT_OFFSET = 0;    /**     * The Constant DEFAULT_LATITUDE.     */    private static final double DEFAULT_LATITUDE = 22.0;    /**     * The Constant DEFAULT_LONGITUDE.     */    private static final double DEFAULT_LONGITUDE = 113.0;    /**     * The Constant DEFAULT_RADIUS.     */    private static final double DEFAULT_RADIUS = 20;    /**     * The LIMI t_ maxcount.     */    private static int LIMIT_MAXCOUNT = 20;    static final protected MongoDBClient mongoClient = DBService.getInstance().getMongoDBClient();    /**     * Gets the int.     *     * @param number        the number     * @param defaultNumber the default number     * @return the int     */    private static int getInt(String number, int defaultNumber) {        if (number == null || number.trim().length() < 1) {            return defaultNumber;        }        return Integer.parseInt(number);    }    /**     * Gets the double.     *     * @param number        the number     * @param defaultNumber the default number     * @return the double     */    private static double getDouble(String number, double defaultNumber) {        if (number == null || number.trim().length() < 1) {            return defaultNumber;        }        return Double.parseDouble(number);    }    /**     * Gets the maxcount.     *     * @param maxCount the max count     * @return the maxcount     */    protected static int getMaxcount(final String maxCount) {        return getInt(maxCount, LIMIT_MAXCOUNT);    }    /**     * Gets the offset.     *     * @param offset the offset     * @return the offset     */    protected static int getOffset(String offset) {        return getInt(offset, DEFAULT_OFFSET);    }    /**     * Gets the latitude.     *     * @param latitude the latitude     * @return the latitude     */    protected static double getLatitude(String latitude) {        return getDouble(latitude, DEFAULT_LATITUDE);    }    /**     * Gets the longitude.     *     * @param longitude the longitude     * @return the longitude     */    protected static double getLongitude(String longitude) {        return getDouble(longitude, DEFAULT_LONGITUDE);    }    /**     * Gets the radius.     *     * @param radius the radius     * @return the radius     */    protected static double getRadius(String radius) {        return getDouble(radius, DEFAULT_RADIUS);    }    public static <E extends CommonData> Set<E> getDataSetFromCursor(DBCursor cursor, Class<E> clazz) {        Set<E> set = new HashSet<E>();        putCursorObjectsIntoCollection(cursor, set, clazz);        return set;    }    public static <E extends CommonData> List<E> getDataListFromCursor(DBCursor cursor, Class<E> clazz) {        List<E> list = new ArrayList<E>();        putCursorObjectsIntoCollection(cursor, list, clazz);        return list;    }    private static <E extends CommonData> void putCursorObjectsIntoCollection(DBCursor cursor, Collection<E> collection, Class<E> clazz) {        if (cursor == null) {            return;        }        try {            while (cursor.hasNext()) {                DBObject obj = cursor.next();                E data = clazz.newInstance();                data.setDbObject(obj);                collection.add(data);            }        } catch (InstantiationException e) {            log.error("<dbObjectsToDataList> class = " + clazz.getName() + ", has no no-arguments constructor", e);        } catch (Exception e) {            log.error("<dbObjectsToDataList> class = " + clazz.getName() + ", has no no-arguments constructor", e);        }        cursor.close();    }}